/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WikiEditEventRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7160147501468337027L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WikiEditEventRecord\",\"namespace\":\"com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka\",\"fields\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"channel\",\"type\":\"string\"},{\"name\":\"commitMessage\",\"type\":\"string\"},{\"name\":\"wikiPage\",\"type\":\"string\"},{\"name\":\"diffurl\",\"type\":\"string\"},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WikiEditEventRecord> ENCODER =
      new BinaryMessageEncoder<WikiEditEventRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WikiEditEventRecord> DECODER =
      new BinaryMessageDecoder<WikiEditEventRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<WikiEditEventRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<WikiEditEventRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WikiEditEventRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this WikiEditEventRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a WikiEditEventRecord from a ByteBuffer. */
  public static WikiEditEventRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence username;
  @Deprecated public java.lang.CharSequence channel;
  @Deprecated public java.lang.CharSequence commitMessage;
  @Deprecated public java.lang.CharSequence wikiPage;
  @Deprecated public java.lang.CharSequence diffurl;
  @Deprecated public org.joda.time.DateTime createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WikiEditEventRecord() {}

  /**
   * All-args constructor.
   * @param username The new value for username
   * @param channel The new value for channel
   * @param commitMessage The new value for commitMessage
   * @param wikiPage The new value for wikiPage
   * @param diffurl The new value for diffurl
   * @param createdAt The new value for createdAt
   */
  public WikiEditEventRecord(java.lang.CharSequence username, java.lang.CharSequence channel, java.lang.CharSequence commitMessage, java.lang.CharSequence wikiPage, java.lang.CharSequence diffurl, org.joda.time.DateTime createdAt) {
    this.username = username;
    this.channel = channel;
    this.commitMessage = commitMessage;
    this.wikiPage = wikiPage;
    this.diffurl = diffurl;
    this.createdAt = createdAt;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return username;
    case 1: return channel;
    case 2: return commitMessage;
    case 3: return wikiPage;
    case 4: return diffurl;
    case 5: return createdAt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      TIMESTAMP_CONVERSION,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: username = (java.lang.CharSequence)value$; break;
    case 1: channel = (java.lang.CharSequence)value$; break;
    case 2: commitMessage = (java.lang.CharSequence)value$; break;
    case 3: wikiPage = (java.lang.CharSequence)value$; break;
    case 4: diffurl = (java.lang.CharSequence)value$; break;
    case 5: createdAt = (org.joda.time.DateTime)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'channel' field.
   * @return The value of the 'channel' field.
   */
  public java.lang.CharSequence getChannel() {
    return channel;
  }

  /**
   * Sets the value of the 'channel' field.
   * @param value the value to set.
   */
  public void setChannel(java.lang.CharSequence value) {
    this.channel = value;
  }

  /**
   * Gets the value of the 'commitMessage' field.
   * @return The value of the 'commitMessage' field.
   */
  public java.lang.CharSequence getCommitMessage() {
    return commitMessage;
  }

  /**
   * Sets the value of the 'commitMessage' field.
   * @param value the value to set.
   */
  public void setCommitMessage(java.lang.CharSequence value) {
    this.commitMessage = value;
  }

  /**
   * Gets the value of the 'wikiPage' field.
   * @return The value of the 'wikiPage' field.
   */
  public java.lang.CharSequence getWikiPage() {
    return wikiPage;
  }

  /**
   * Sets the value of the 'wikiPage' field.
   * @param value the value to set.
   */
  public void setWikiPage(java.lang.CharSequence value) {
    this.wikiPage = value;
  }

  /**
   * Gets the value of the 'diffurl' field.
   * @return The value of the 'diffurl' field.
   */
  public java.lang.CharSequence getDiffurl() {
    return diffurl;
  }

  /**
   * Sets the value of the 'diffurl' field.
   * @param value the value to set.
   */
  public void setDiffurl(java.lang.CharSequence value) {
    this.diffurl = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public org.joda.time.DateTime getCreatedAt() {
    return createdAt;
  }

  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(org.joda.time.DateTime value) {
    this.createdAt = value;
  }

  /**
   * Creates a new WikiEditEventRecord RecordBuilder.
   * @return A new WikiEditEventRecord RecordBuilder
   */
  public static com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder newBuilder() {
    return new com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder();
  }

  /**
   * Creates a new WikiEditEventRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WikiEditEventRecord RecordBuilder
   */
  public static com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder newBuilder(com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder other) {
    return new com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder(other);
  }

  /**
   * Creates a new WikiEditEventRecord RecordBuilder by copying an existing WikiEditEventRecord instance.
   * @param other The existing instance to copy.
   * @return A new WikiEditEventRecord RecordBuilder
   */
  public static com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder newBuilder(com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord other) {
    return new com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder(other);
  }

  /**
   * RecordBuilder for WikiEditEventRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WikiEditEventRecord>
    implements org.apache.avro.data.RecordBuilder<WikiEditEventRecord> {

    private java.lang.CharSequence username;
    private java.lang.CharSequence channel;
    private java.lang.CharSequence commitMessage;
    private java.lang.CharSequence wikiPage;
    private java.lang.CharSequence diffurl;
    private org.joda.time.DateTime createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.channel)) {
        this.channel = data().deepCopy(fields()[1].schema(), other.channel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.commitMessage)) {
        this.commitMessage = data().deepCopy(fields()[2].schema(), other.commitMessage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wikiPage)) {
        this.wikiPage = data().deepCopy(fields()[3].schema(), other.wikiPage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.diffurl)) {
        this.diffurl = data().deepCopy(fields()[4].schema(), other.diffurl);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[5].schema(), other.createdAt);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WikiEditEventRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.channel)) {
        this.channel = data().deepCopy(fields()[1].schema(), other.channel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.commitMessage)) {
        this.commitMessage = data().deepCopy(fields()[2].schema(), other.commitMessage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wikiPage)) {
        this.wikiPage = data().deepCopy(fields()[3].schema(), other.wikiPage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.diffurl)) {
        this.diffurl = data().deepCopy(fields()[4].schema(), other.diffurl);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[5].schema(), other.createdAt);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }

    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'channel' field.
      * @return The value.
      */
    public java.lang.CharSequence getChannel() {
      return channel;
    }

    /**
      * Sets the value of the 'channel' field.
      * @param value The value of 'channel'.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder setChannel(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.channel = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'channel' field has been set.
      * @return True if the 'channel' field has been set, false otherwise.
      */
    public boolean hasChannel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'channel' field.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder clearChannel() {
      channel = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'commitMessage' field.
      * @return The value.
      */
    public java.lang.CharSequence getCommitMessage() {
      return commitMessage;
    }

    /**
      * Sets the value of the 'commitMessage' field.
      * @param value The value of 'commitMessage'.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder setCommitMessage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.commitMessage = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'commitMessage' field has been set.
      * @return True if the 'commitMessage' field has been set, false otherwise.
      */
    public boolean hasCommitMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'commitMessage' field.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder clearCommitMessage() {
      commitMessage = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'wikiPage' field.
      * @return The value.
      */
    public java.lang.CharSequence getWikiPage() {
      return wikiPage;
    }

    /**
      * Sets the value of the 'wikiPage' field.
      * @param value The value of 'wikiPage'.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder setWikiPage(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.wikiPage = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'wikiPage' field has been set.
      * @return True if the 'wikiPage' field has been set, false otherwise.
      */
    public boolean hasWikiPage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'wikiPage' field.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder clearWikiPage() {
      wikiPage = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'diffurl' field.
      * @return The value.
      */
    public java.lang.CharSequence getDiffurl() {
      return diffurl;
    }

    /**
      * Sets the value of the 'diffurl' field.
      * @param value The value of 'diffurl'.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder setDiffurl(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.diffurl = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'diffurl' field has been set.
      * @return True if the 'diffurl' field has been set, false otherwise.
      */
    public boolean hasDiffurl() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'diffurl' field.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder clearDiffurl() {
      diffurl = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public org.joda.time.DateTime getCreatedAt() {
      return createdAt;
    }

    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder setCreatedAt(org.joda.time.DateTime value) {
      validate(fields()[5], value);
      this.createdAt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.github.pchalcol.wikiedit.pipeline.infrastructure.kafka.WikiEditEventRecord.Builder clearCreatedAt() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WikiEditEventRecord build() {
      try {
        WikiEditEventRecord record = new WikiEditEventRecord();
        record.username = fieldSetFlags()[0] ? this.username : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.channel = fieldSetFlags()[1] ? this.channel : (java.lang.CharSequence) defaultValue(fields()[1], record.getConversion(1));
        record.commitMessage = fieldSetFlags()[2] ? this.commitMessage : (java.lang.CharSequence) defaultValue(fields()[2], record.getConversion(2));
        record.wikiPage = fieldSetFlags()[3] ? this.wikiPage : (java.lang.CharSequence) defaultValue(fields()[3], record.getConversion(3));
        record.diffurl = fieldSetFlags()[4] ? this.diffurl : (java.lang.CharSequence) defaultValue(fields()[4], record.getConversion(4));
        record.createdAt = fieldSetFlags()[5] ? this.createdAt : (org.joda.time.DateTime) defaultValue(fields()[5], record.getConversion(5));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WikiEditEventRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<WikiEditEventRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WikiEditEventRecord>
    READER$ = (org.apache.avro.io.DatumReader<WikiEditEventRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
