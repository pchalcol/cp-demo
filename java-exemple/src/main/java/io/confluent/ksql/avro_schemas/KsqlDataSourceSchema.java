/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.ksql.avro_schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class KsqlDataSourceSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1065499692403590933L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KsqlDataSourceSchema\",\"namespace\":\"io.confluent.ksql.avro_schemas\",\"fields\":[{\"name\":\"USERNAME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"WIKIPAGE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"COUNT\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<KsqlDataSourceSchema> ENCODER =
      new BinaryMessageEncoder<KsqlDataSourceSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KsqlDataSourceSchema> DECODER =
      new BinaryMessageDecoder<KsqlDataSourceSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<KsqlDataSourceSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<KsqlDataSourceSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<KsqlDataSourceSchema>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this KsqlDataSourceSchema to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a KsqlDataSourceSchema from a ByteBuffer. */
  public static KsqlDataSourceSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence USERNAME;
  @Deprecated public java.lang.CharSequence WIKIPAGE;
  @Deprecated public java.lang.Long COUNT;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KsqlDataSourceSchema() {}

  /**
   * All-args constructor.
   * @param USERNAME The new value for USERNAME
   * @param WIKIPAGE The new value for WIKIPAGE
   * @param COUNT The new value for COUNT
   */
  public KsqlDataSourceSchema(java.lang.CharSequence USERNAME, java.lang.CharSequence WIKIPAGE, java.lang.Long COUNT) {
    this.USERNAME = USERNAME;
    this.WIKIPAGE = WIKIPAGE;
    this.COUNT = COUNT;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return USERNAME;
    case 1: return WIKIPAGE;
    case 2: return COUNT;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: USERNAME = (java.lang.CharSequence)value$; break;
    case 1: WIKIPAGE = (java.lang.CharSequence)value$; break;
    case 2: COUNT = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'USERNAME' field.
   * @return The value of the 'USERNAME' field.
   */
  public java.lang.CharSequence getUSERNAME() {
    return USERNAME;
  }

  /**
   * Sets the value of the 'USERNAME' field.
   * @param value the value to set.
   */
  public void setUSERNAME(java.lang.CharSequence value) {
    this.USERNAME = value;
  }

  /**
   * Gets the value of the 'WIKIPAGE' field.
   * @return The value of the 'WIKIPAGE' field.
   */
  public java.lang.CharSequence getWIKIPAGE() {
    return WIKIPAGE;
  }

  /**
   * Sets the value of the 'WIKIPAGE' field.
   * @param value the value to set.
   */
  public void setWIKIPAGE(java.lang.CharSequence value) {
    this.WIKIPAGE = value;
  }

  /**
   * Gets the value of the 'COUNT' field.
   * @return The value of the 'COUNT' field.
   */
  public java.lang.Long getCOUNT() {
    return COUNT;
  }

  /**
   * Sets the value of the 'COUNT' field.
   * @param value the value to set.
   */
  public void setCOUNT(java.lang.Long value) {
    this.COUNT = value;
  }

  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder newBuilder() {
    return new io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder();
  }

  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder newBuilder(io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder other) {
    return new io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder(other);
  }

  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder by copying an existing KsqlDataSourceSchema instance.
   * @param other The existing instance to copy.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder newBuilder(io.confluent.ksql.avro_schemas.KsqlDataSourceSchema other) {
    return new io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder(other);
  }

  /**
   * RecordBuilder for KsqlDataSourceSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KsqlDataSourceSchema>
    implements org.apache.avro.data.RecordBuilder<KsqlDataSourceSchema> {

    private java.lang.CharSequence USERNAME;
    private java.lang.CharSequence WIKIPAGE;
    private java.lang.Long COUNT;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.USERNAME)) {
        this.USERNAME = data().deepCopy(fields()[0].schema(), other.USERNAME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.WIKIPAGE)) {
        this.WIKIPAGE = data().deepCopy(fields()[1].schema(), other.WIKIPAGE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.COUNT)) {
        this.COUNT = data().deepCopy(fields()[2].schema(), other.COUNT);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing KsqlDataSourceSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.ksql.avro_schemas.KsqlDataSourceSchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.USERNAME)) {
        this.USERNAME = data().deepCopy(fields()[0].schema(), other.USERNAME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.WIKIPAGE)) {
        this.WIKIPAGE = data().deepCopy(fields()[1].schema(), other.WIKIPAGE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.COUNT)) {
        this.COUNT = data().deepCopy(fields()[2].schema(), other.COUNT);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'USERNAME' field.
      * @return The value.
      */
    public java.lang.CharSequence getUSERNAME() {
      return USERNAME;
    }

    /**
      * Sets the value of the 'USERNAME' field.
      * @param value The value of 'USERNAME'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setUSERNAME(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.USERNAME = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'USERNAME' field has been set.
      * @return True if the 'USERNAME' field has been set, false otherwise.
      */
    public boolean hasUSERNAME() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'USERNAME' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearUSERNAME() {
      USERNAME = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'WIKIPAGE' field.
      * @return The value.
      */
    public java.lang.CharSequence getWIKIPAGE() {
      return WIKIPAGE;
    }

    /**
      * Sets the value of the 'WIKIPAGE' field.
      * @param value The value of 'WIKIPAGE'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setWIKIPAGE(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.WIKIPAGE = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'WIKIPAGE' field has been set.
      * @return True if the 'WIKIPAGE' field has been set, false otherwise.
      */
    public boolean hasWIKIPAGE() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'WIKIPAGE' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearWIKIPAGE() {
      WIKIPAGE = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'COUNT' field.
      * @return The value.
      */
    public java.lang.Long getCOUNT() {
      return COUNT;
    }

    /**
      * Sets the value of the 'COUNT' field.
      * @param value The value of 'COUNT'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setCOUNT(java.lang.Long value) {
      validate(fields()[2], value);
      this.COUNT = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'COUNT' field has been set.
      * @return True if the 'COUNT' field has been set, false otherwise.
      */
    public boolean hasCOUNT() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'COUNT' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearCOUNT() {
      COUNT = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KsqlDataSourceSchema build() {
      try {
        KsqlDataSourceSchema record = new KsqlDataSourceSchema();
        record.USERNAME = fieldSetFlags()[0] ? this.USERNAME : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.WIKIPAGE = fieldSetFlags()[1] ? this.WIKIPAGE : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.COUNT = fieldSetFlags()[2] ? this.COUNT : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KsqlDataSourceSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<KsqlDataSourceSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KsqlDataSourceSchema>
    READER$ = (org.apache.avro.io.DatumReader<KsqlDataSourceSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
